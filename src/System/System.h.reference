#ifndef SYSTEM_H
#define SYSTEM_H

#include "qpcpp.h"
#include "fw_pipe.h"
#include "hsm_id.h"
#include "event.h"

using namespace QP;
using namespace FW;

namespace APP {

class System : public QActive {
public:
    System();
    void Start(uint8_t prio) {
        QActive::start(prio, m_evtQueueStor, ARRAY_COUNT(m_evtQueueStor), NULL, 0);
    }

protected:
    static QState InitialPseudoState(System * const me, QEvt const * const e);
    static QState Root(System * const me, QEvt const * const e);
        static QState Stopped(System * const me, QEvt const * const e);
        static QState Starting1(System * const me, QEvt const * const e);
        static QState Starting2(System * const me, QEvt const * const e);
        static QState Stopping1(System * const me, QEvt const * const e);
        static QState Stopping2(System * const me, QEvt const * const e);
        static QState Started(System * const me, QEvt const * const e); 

    void HandleCfm(ErrorEvt const &e, uint8_t expectedCnt);

    enum {
        EVT_QUEUE_COUNT = 16,
        DEFER_QUEUE_COUNT = 4
    };
    QEvt const *m_evtQueueStor[EVT_QUEUE_COUNT];
    QEvt const *m_deferQueueStor[DEFER_QUEUE_COUNT];
    QEQueue m_deferQueue;
    uint8_t m_id;
    char const * m_name;
    uint16_t m_nextSequence;
    uint16_t m_savedInSeq;
    uint8_t m_cfmCount;
    
    enum {
        UART_OUT_FIFO_ORDER = 11,
        UART_IN_FIFO_ORDER = 10
    };
    uint8_t m_uart2OutFifoStor[1 << UART_OUT_FIFO_ORDER];
    uint8_t m_uart2InFifoStor[1 << UART_IN_FIFO_ORDER];
    Fifo m_uart2OutFifo;
    Fifo m_uart2InFifo;

    QTimeEvt m_stateTimer;
    QTimeEvt m_testTimer;
};

} // namespace APP

#endif // SYSTEM_H
